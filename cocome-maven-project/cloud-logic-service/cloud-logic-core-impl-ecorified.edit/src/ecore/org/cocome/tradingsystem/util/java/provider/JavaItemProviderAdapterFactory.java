/**
 */
package ecore.org.cocome.tradingsystem.util.java.provider;

import ecore.org.cocome.tradingsystem.util.java.util.JavaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class JavaItemProviderAdapterFactory extends JavaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public JavaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore.org.cocome.tradingsystem.util.java.Assert} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssertItemProvider assertItemProvider;

	/**
	 * This creates an adapter for a {@link ecore.org.cocome.tradingsystem.util.java.Assert}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssertAdapter() {
		if (assertItemProvider == null) {
			assertItemProvider = new AssertItemProvider(this);
		}

		return assertItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore.org.cocome.tradingsystem.util.java.DualElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DualElementItemProvider dualElementItemProvider;

	/**
	 * This creates an adapter for a {@link ecore.org.cocome.tradingsystem.util.java.DualElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDualElementAdapter() {
		if (dualElementItemProvider == null) {
			dualElementItemProvider = new DualElementItemProvider(this);
		}

		return dualElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore.org.cocome.tradingsystem.util.java.DualIterator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DualIteratorItemProvider dualIteratorItemProvider;

	/**
	 * This creates an adapter for a {@link ecore.org.cocome.tradingsystem.util.java.DualIterator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDualIteratorAdapter() {
		if (dualIteratorItemProvider == null) {
			dualIteratorItemProvider = new DualIteratorItemProvider(this);
		}

		return dualIteratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore.org.cocome.tradingsystem.util.java.Iterables} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IterablesItemProvider iterablesItemProvider;

	/**
	 * This creates an adapter for a {@link ecore.org.cocome.tradingsystem.util.java.Iterables}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIterablesAdapter() {
		if (iterablesItemProvider == null) {
			iterablesItemProvider = new IterablesItemProvider(this);
		}

		return iterablesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore.org.cocome.tradingsystem.util.java.Lists} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListsItemProvider listsItemProvider;

	/**
	 * This creates an adapter for a {@link ecore.org.cocome.tradingsystem.util.java.Lists}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListsAdapter() {
		if (listsItemProvider == null) {
			listsItemProvider = new ListsItemProvider(this);
		}

		return listsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore.org.cocome.tradingsystem.util.java.Maps} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapsItemProvider mapsItemProvider;

	/**
	 * This creates an adapter for a {@link ecore.org.cocome.tradingsystem.util.java.Maps}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapsAdapter() {
		if (mapsItemProvider == null) {
			mapsItemProvider = new MapsItemProvider(this);
		}

		return mapsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore.org.cocome.tradingsystem.util.java.Reflection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflectionItemProvider reflectionItemProvider;

	/**
	 * This creates an adapter for a {@link ecore.org.cocome.tradingsystem.util.java.Reflection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflectionAdapter() {
		if (reflectionItemProvider == null) {
			reflectionItemProvider = new ReflectionItemProvider(this);
		}

		return reflectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore.org.cocome.tradingsystem.util.java.Sets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetsItemProvider setsItemProvider;

	/**
	 * This creates an adapter for a {@link ecore.org.cocome.tradingsystem.util.java.Sets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetsAdapter() {
		if (setsItemProvider == null) {
			setsItemProvider = new SetsItemProvider(this);
		}

		return setsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore.org.cocome.tradingsystem.util.java.Swing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwingItemProvider swingItemProvider;

	/**
	 * This creates an adapter for a {@link ecore.org.cocome.tradingsystem.util.java.Swing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwingAdapter() {
		if (swingItemProvider == null) {
			swingItemProvider = new SwingItemProvider(this);
		}

		return swingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecore.org.cocome.tradingsystem.util.java.TimeSpan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeSpanItemProvider timeSpanItemProvider;

	/**
	 * This creates an adapter for a {@link ecore.org.cocome.tradingsystem.util.java.TimeSpan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeSpanAdapter() {
		if (timeSpanItemProvider == null) {
			timeSpanItemProvider = new TimeSpanItemProvider(this);
		}

		return timeSpanItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (assertItemProvider != null) assertItemProvider.dispose();
		if (dualElementItemProvider != null) dualElementItemProvider.dispose();
		if (dualIteratorItemProvider != null) dualIteratorItemProvider.dispose();
		if (iterablesItemProvider != null) iterablesItemProvider.dispose();
		if (listsItemProvider != null) listsItemProvider.dispose();
		if (mapsItemProvider != null) mapsItemProvider.dispose();
		if (reflectionItemProvider != null) reflectionItemProvider.dispose();
		if (setsItemProvider != null) setsItemProvider.dispose();
		if (swingItemProvider != null) swingItemProvider.dispose();
		if (timeSpanItemProvider != null) timeSpanItemProvider.dispose();
	}

}
